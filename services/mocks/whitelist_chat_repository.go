// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "cicd-gitlab-ee.telkomsel.co.id/telkomsel/t-survey/crox-tsurvey/go-chat/services/domain/entity"
)

// WhitelistChatRepository is an autogenerated mock type for the WhitelistChatRepository type
type WhitelistChatRepository struct {
	mock.Mock
}

// GetUsersByEmail provides a mock function with given fields: ctx, email
func (_m *WhitelistChatRepository) GetUsersByEmail(ctx context.Context, email string) (*entity.WhitelistChat, error) {
	ret := _m.Called(ctx, email)

	var r0 *entity.WhitelistChat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.WhitelistChat, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.WhitelistChat); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.WhitelistChat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWhitelistChatRepository creates a new instance of WhitelistChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWhitelistChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WhitelistChatRepository {
	mock := &WhitelistChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
